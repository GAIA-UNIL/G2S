name: Upload Python Package on PyPI server

on:
  workflow_dispatch:
  # push:
  #   paths:
  #   - 'version'

jobs:
  deploy:
    name: Compile for ${{ matrix.OS }} using ${{ matrix.python }} and upload on packages manager
    strategy:
      matrix:
        OS: [ ubuntu-20.04, windows-latest, macOS-latest]
        python: ['3.7', '3.8', '3.9','3.10','3.11', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9' ]
        arch: [ x64 ]
        include:
          - os: ubuntu-20.04
            python: '3.6'
            arch: x64
      fail-fast: false
    runs-on: ${{ matrix.OS }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install oldest-supported-numpy
        pip install setuptools wheel twine packaging

    - name: Install Ubuntu dependencies
      if : contains( matrix.OS, 'ubuntu' )
      run: |
        sudo add-apt-repository 'deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe'
        sudo apt update;
        sudo apt install build-essential libzmq3-dev patchelf
        sudo apt -y install gcc-7 g++-7
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 7
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 7
        wget "https://raw.githubusercontent.com/zeromq/cppzmq/master/zmq.hpp" -O include/zmq.hpp
        wget 'https://codeload.github.com/open-source-parsers/jsoncpp/zip/master' -O jsoncpp.zip
        unzip jsoncpp.zip
        cd jsoncpp-master
        python amalgamate.py
        cd ..
    - name: Install macOS dependencies
      if : contains( matrix.OS, 'macOS' )
      run: |
        brew install zeromq jsoncpp cppzmq
    - name: Add msbuild to PATH
      if : contains( matrix.os, 'windows' )
      uses: microsoft/setup-msbuild@v1.1
    - name: Install Windows dependencies
      if : contains( matrix.OS, 'windows' )
      run: |
        cd build/python-build
        cmd.exe /c setup_Win_compile_all.bat
    
    - name: Build
      run: |
        cd build/python-build
        python setup.py --setuptools bdist_wheel
    
    - name: Correct whl for Linux
      if : contains( matrix.OS, 'ubuntu' )
      run: |
        cd build/python-build/dist
        # pip install auditwheel
        # auditwheel repair *.whl
        # for wheel in $(find . -iname "*.whl") ; do unzip -o $wheel; patchelf --clear-symbol-version stat --clear-symbol-version _ZSt28__throw_bad_array_new_lengthv g2s/*.so; zip -u $wheel g2s/*.so; done
        for wheel in $(find . -iname "*.whl") ; do mv $wheel $(echo $wheel | sed 's/-linux_/-manylinux1_/'); done
    - name: Correct whl for macOS
      if : contains( matrix.OS, 'macOS' )
      run: |
        cd build/python-build
        pip install delocate
        delocate-wheel -v dist/*.whl
    
    - name: Publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        cd build/python-build
        twine upload dist/*.whl --verbose 
# --skip-existing
